@article{hoare1962quicksort,
  title={Quicksort},
  author={Hoare, Charles AR},
  journal={The Computer Journal},
  volume={5},
  number={1},
  pages={10--16},
  year={1962},
  publisher={Oxford University Press}
}

@article{nassimi1979bitonic,
author = {Nassimi, D. and Sahni, S.},
title = {Bitonic Sort on a Mesh-Connected Parallel Computer},
year = {1979},
issue_date = {January 1979},
publisher = {IEEE Computer Society},
address = {USA},
volume = {28},
number = {1},
issn = {0018-9340},
url = {https://doi.org/10.1109/TC.1979.1675216},
doi = {10.1109/TC.1979.1675216},
abstract = {An O(n) algorithm to sort n2elements on an Illiac IV-like n \texttimes{} n mesh-connected processor array is presented. This algorithm sorts the n2elements into row-major order and is an adaptation of Batcher's bitonic sort. A slight modification of our algorithm yields an O(n) algorithm to sort n2elements into snake-like row-major order. Extensions to the case of a j-dimensi},
journal = {IEEE Trans. Comput.},
month = jan,
pages = {2--7},
numpages = {6},
keywords = {complexity, Bitonic sort, parallel sorting, mesh-connected parallel computer, SIMD machine}
}

@inproceedings{10.5555/1882792.1882841,
author = {Peters, Hagen and Schulz-Hildebrandt, Ole and Luttenberger, Norbert},
title = {Fast In-Place Sorting with CUDA Based on Bitonic Sort},
year = {2009},
isbn = {364214389X},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {State of the art graphics processors provide high processing power and furthermore, the high programmability of GPUs offered by frameworks like CUDA increases their usability as high-performance coprocessors for general-purpose computing. Sorting is well-investigated in Computer Science in general, but (because of this new field of application for GPUs) there is a demand for high-performance parallel sorting algorithms that fit to the characteristics of modern GPU-architecture.We present a high-performance in-place implementation of Batcher's bitonic sorting networks for CUDA-enabled GPUs. We adapted bitonic sort for arbitrary input length and assigned compare/exchange-operations to threads in a way that decreases low-performance global-memory access and thereby greatly increases the performance of the implementation.},
booktitle = {Proceedings of the 8th International Conference on Parallel Processing and Applied Mathematics: Part I},
pages = {403â€“410},
numpages = {8},
keywords = {parallel, multicore, GPU, CUDA, GPGPU, sorting},
location = {Wroclaw, Poland},
series = {PPAM'09}
}