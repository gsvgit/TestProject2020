// Signature file for parser generated by fsyacc
module CalcParser
type token = 
  | EOF
  | RBR
  | LBR
  | STAR
  | ALT
  | SMB of (char)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_RBR
    | TOKEN_LBR
    | TOKEN_STAR
    | TOKEN_ALT
    | TOKEN_SMB
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_regexp
    | NONTERM_seq
    | NONTERM_seq_elem
    | NONTERM_eof
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> ( Regexp.Regexp<char> ) 
