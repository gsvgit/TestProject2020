// Implementation file for parser generated by fsyacc
module CalcParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 0 " "

# 8 "CalcParser.fs"
// This type is the type of tokens accepted by the parser
type token =
  | EOF
  | RBR
  | LBR
  | STAR
  | ALT
  | SMB of (char)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId =
    | TOKEN_EOF
    | TOKEN_RBR
    | TOKEN_LBR
    | TOKEN_STAR
    | TOKEN_ALT
    | TOKEN_SMB
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId =
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_regexp
    | NONTERM_seq
    | NONTERM_seq_elem
    | NONTERM_eof

// This function maps tokens to integer indexes
let tagOfToken (t:token) =
  match t with
  | EOF  -> 0
  | RBR  -> 1
  | LBR  -> 2
  | STAR  -> 3
  | ALT  -> 4
  | SMB _ -> 5

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) =
  match tokenIdx with
  | 0 -> TOKEN_EOF
  | 1 -> TOKEN_RBR
  | 2 -> TOKEN_LBR
  | 3 -> TOKEN_STAR
  | 4 -> TOKEN_ALT
  | 5 -> TOKEN_SMB
  | 8 -> TOKEN_end_of_input
  | 6 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) =
  match prodIdx with
    | 0 -> NONTERM__startstart
    | 1 -> NONTERM_start
    | 2 -> NONTERM_regexp
    | 3 -> NONTERM_regexp
    | 4 -> NONTERM_seq
    | 5 -> NONTERM_seq
    | 6 -> NONTERM_seq_elem
    | 7 -> NONTERM_seq_elem
    | 8 -> NONTERM_seq_elem
    | 9 -> NONTERM_eof
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 8
let _fsyacc_tagOfErrorTerminal = 6

// This function gets the name of a token as a string
let token_to_string (t:token) =
  match t with
  | EOF  -> "EOF"
  | RBR  -> "RBR"
  | LBR  -> "LBR"
  | STAR  -> "STAR"
  | ALT  -> "ALT"
  | SMB _ -> "SMB"

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) =
  match t with
  | EOF  -> (null : System.Object)
  | RBR  -> (null : System.Object)
  | LBR  -> (null : System.Object)
  | STAR  -> (null : System.Object)
  | ALT  -> (null : System.Object)
  | SMB _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 2us; 5us; 6us; 10us; 11us; 4us; 65535us; 0us; 4us; 5us; 4us; 7us; 8us; 10us; 4us; 4us; 65535us; 0us; 7us; 5us; 7us; 7us; 7us; 10us; 7us; 1us; 65535us; 2us; 3us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 12us; 17us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 1us; 3us; 1us; 3us; 3us; 4us; 5us; 8us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 8us; 1us; 9us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 15us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; |]
let _fsyacc_action_rows = 15
let _fsyacc_actionTableElements = [|2us; 32768us; 2us; 10us; 5us; 9us; 0us; 49152us; 1us; 32768us; 0us; 14us; 0us; 16385us; 1us; 16386us; 4us; 5us; 2us; 32768us; 2us; 10us; 5us; 9us; 0us; 16387us; 3us; 16388us; 2us; 10us; 3us; 13us; 5us; 9us; 0us; 16389us; 0us; 16390us; 2us; 32768us; 2us; 10us; 5us; 9us; 1us; 32768us; 1us; 12us; 0us; 16391us; 0us; 16392us; 0us; 16393us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 6us; 7us; 9us; 12us; 13us; 17us; 18us; 19us; 22us; 24us; 25us; 26us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 3us; 1us; 2us; 1us; 3us; 2us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 16387us; 65535us; 16389us; 16390us; 65535us; 65535us; 16391us; 16392us; 16393us; |]
let _fsyacc_reductions ()  =    [|
# 107 "CalcParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Regexp.Regexp<char> )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 116 "CalcParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'regexp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'eof)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "CalcParser.fsy"
                                        _1
                   )
# 20 "CalcParser.fsy"
                 :  Regexp.Regexp<char> ));
# 128 "CalcParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "CalcParser.fsy"
                                  _1
                   )
# 22 "CalcParser.fsy"
                 : 'regexp));
# 139 "CalcParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'regexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "CalcParser.fsy"
                                                        Regexp.Regexp.Alt(_1,_3)
                   )
# 22 "CalcParser.fsy"
                 : 'regexp));
# 151 "CalcParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq_elem)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "CalcParser.fsy"
                                    _1
                   )
# 24 "CalcParser.fsy"
                 : 'seq));
# 162 "CalcParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq_elem)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "CalcParser.fsy"
                                                        Regexp.Regexp.Seq(_1,_2)
                   )
# 24 "CalcParser.fsy"
                 : 'seq));
# 174 "CalcParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "CalcParser.fsy"
                                    Regexp.Regexp.RSmb(_1)
                   )
# 26 "CalcParser.fsy"
                 : 'seq_elem));
# 185 "CalcParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'regexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "CalcParser.fsy"
                                                                              _2
                   )
# 26 "CalcParser.fsy"
                 : 'seq_elem));
# 196 "CalcParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq_elem)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "CalcParser.fsy"
                                                                                                   Regexp.Regexp.Star(_1)
                   )
# 26 "CalcParser.fsy"
                 : 'seq_elem));
# 207 "CalcParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "CalcParser.fsy"
                               1
                   )
# 28 "CalcParser.fsy"
                 : 'eof));
|]
# 218 "CalcParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> =
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken;
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) ->
                              match parse_error_rich with
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 9;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  Regexp.Regexp<char>  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
