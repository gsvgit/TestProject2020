{

// Opens methods related to fslex.exe
open FSharp.Text.Lexing

let newline (lexbuf: LexBuffer<_>) =
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

let lexeme x =
    let s = LexBuffer<_>.LexemeString x
    s.Substring(1, s.Length - 2)
}

// Regular expressions
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')

let smb = ['a'-'z' 'A'-'Z' '0'-'9' '-' '.']

let str = '"' smb* '"'
let vname = '[' ['a'-'z' 'A'-'Z']+ ['0'-'9']* ']'

rule tokenStream = parse
// --------------------------
| smb 		{ CalcParser.SMB(char (lexbuf.Lexeme).[0]) }
// --------------------------
| whitespace	{ tokenStream lexbuf }
| newline	{ tokenStream lexbuf }
//---------------------------
| '(' {CalcParser.LBR}
| ')' {CalcParser.RBR}
| '*' {CalcParser.STAR}
| '|' {CalcParser.ALT}
| '?' {CalcParser.OPT}
| '&' {CalcParser.AMP}
| '=' {CalcParser.EQ}
| vname {CalcParser.VNAME(lexeme lexbuf)}
| "let" {CalcParser.KW_LET}
| "print" {CalcParser.KW_PRINT}
| "findAll" {CalcParser.KW_FIND_ALL}
| "isAcceptable" {CalcParser.KW_IS_ACCEPTABLE}
| str {CalcParser.STR(lexeme lexbuf)}
// --------------------------
| _    		{ failwith ("Lexer error. Unexpected symbol: " + LexBuffer<_>.LexemeString lexbuf) }
| eof   	{ CalcParser.EOF }

