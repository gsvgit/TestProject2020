// The start token becomes a parser function in the compiled code:
%start start

// Regular tokens
%token <char> SMB
%token ALT
%token STAR
%token LBR
%token RBR


// Misc tokens
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < Regexp.Regexp<char> > start

%%

start: regexp eof {$1}

regexp: seq {$1} | seq ALT regexp {Regexp.Regexp.Alt($1,$3)}

seq: seq_elem {$1} | seq_elem seq {Regexp.Regexp.Seq($1,$2)}

seq_elem: SMB {Regexp.Regexp.RSmb($1)} | LBR regexp RBR {$2} | seq_elem STAR {Regexp.Regexp.Star($1)}

eof: EOF {1}
