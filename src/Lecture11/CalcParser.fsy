// The start token becomes a parser function in the compiled code:
%start start

// Regular tokens
%token <char> SMB
%token ALT
%token STAR
%token LBR
%token RBR
%token OPT
%token AMP
%token <string> VNAME
%token KW_LET
%token KW_PRINT
%token KW_FIND_ALL
%token KW_IS_ACCEPTABLE
%token EQ
%token <string> STR

// Misc tokens
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < AST.Program > start

%%

start: stmt {[$1]}
     | stmt start {$1 :: $2}

stmt: KW_PRINT vname {AST.Print($2)}
    | KW_LET vname EQ expr {AST.VDecl($2,$4)}

expr: regexp_full {AST.RegExp($1)}
    | KW_FIND_ALL STR regexp_full {AST.FindAll($2,$3)}
    | KW_IS_ACCEPTABLE STR regexp_full {AST.IsAcceptable($2,$3)}

regexp_full: regexp {$1}
           | regexp AMP regexp_full {AST.Intersect($1,$3)}

regexp: seq {$1} | seq ALT regexp {AST.Alt($1,$3)}

seq: seq_elem {$1} | seq_elem seq {AST.Seq($1,$2)}

seq_elem: SMB {AST.RSmb($1)}
        | vname {AST.RVar($1)}
        | LBR regexp_full RBR {$2}
        | seq_elem STAR {AST.Star($1)}
        | seq_elem OPT {AST.Opt($1)}

vname: VNAME {AST.Var($1)}

eof: EOF {1}
